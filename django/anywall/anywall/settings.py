"""
Django settings for anywall project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from config import SERVER_IP
from config import DB_NAME
from config import DB_PASSWORD
from config import RESOURCES_DIR

from anywall_app.logger import setup_logger
logger = setup_logger(__name__)

import os
import sys


try:
    python_exe_path = sys.executable
    logger.debug(f"python_exe_path: {python_exe_path}")
except Exception:
    python_exe_path = sys.executable


BASE_DIR = Path(__file__).resolve().parent.parent


logger.debug(f"settings BASE_DIR + 1: {Path(__file__).resolve().parent}")
logger.debug(f"Path(__file__): {Path(__file__)}")

external_migrations_dir = RESOURCES_DIR


sys.path.append(external_migrations_dir)

SECRET_KEY = 'django-insecure-=mff#jb50a%mh=sg(np!0qo1*g6n-%0_5zgd!v00msq-+z9d5@'

DEBUG = True

LOGIN_URL = '/login'
LOGIN_REDIRECT_URL = '/anywall'
LOGOUT_REDIRECT_URL = '/login'

ASGI_APPLICATION = 'anywall.asgi.application'



ALLOWED_HOSTS = [SERVER_IP, 'localhost', '127.0.0.1']


CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

# Redirect all HTTP traffic to HTTPS
SECURE_SSL_REDIRECT = True

# Use the `X-Forwarded-Proto` header to determine if the request is secure (useful for reverse proxies)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Enable HTTP Strict Transport Security (HSTS)
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [(SERVER_IP, 6379)],
#         },# Enable secure cookies

#     },
# }

from channels.layers import InMemoryChannelLayer
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

WS_PORT = 8000

CSRF_TRUSTED_ORIGINS = ['https://'+ SERVER_IP, 'https://127.0.0.1:8000', 'https://localhost:8000']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'rest_framework',
    'colorfield',
    'anywall_app',
    'drf_yasg',
    'channels',
]

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Basic': {
            'type': 'basic'
        }
    }
}

MEDIA_ROOT = RESOURCES_DIR + '\\'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'anywall_app.middleware.CustomHeadersMiddleware',
]

ROOT_URLCONF = 'anywall.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'anywall.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DB_NAME,
        'USER': 'root',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}
DATABASES['default']['PASSWORD'] = DB_PASSWORD

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

MIGRATION_MODULES = {
    'anywall_app': 'migrations',
}

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Rome'

USE_I18N = True

USE_TZ = True

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
